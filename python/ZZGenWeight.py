import sys
import os
import json

from math import floor

from DevTools.Analyzer.Candidates import CompositeCandidate

import ROOT


class ZZGenWeight(object):

    def __init__(self,version):
        self.version = version

        # hard coded because thats what they give me
        self.default = 1.1
        self.dPhiZZ_4l = { # lower boundary of dPhi
            0.0 : 1.515838921760,
            0.1 : 1.496256665410,
            0.2 : 1.495522061910,
            0.3 : 1.483273154250,
            0.4 : 1.465589701130,
            0.5 : 1.491500887510,
            0.6 : 1.441183580450,
            0.7 : 1.440830603990,
            0.8 : 1.414339019120,
            0.9 : 1.422534218560,
            1.0 : 1.401037066000,
            1.1 : 1.408539428810,
            1.2 : 1.381247744080,
            1.3 : 1.370553357430,
            1.4 : 1.347323316000,
            1.5 : 1.340113437450,
            1.6 : 1.312661036510,
            1.7 : 1.290055062010,
            1.8 : 1.255322614790,
            1.9 : 1.254455642450,
            2.0 : 1.224047664420,
            2.1 : 1.178816782670,
            2.2 : 1.162624827140,
            2.3 : 1.105401140940,
            2.4 : 1.074749265690,
            2.5 : 1.021864599380,
            2.6 : 0.946334793286,
            2.7 : 0.857458082628,
            2.8 : 0.716607670482,
            2.9 : 1.132841784840,
        }
        
        self.dPhiZZ_2l2l = { # lower boundary of dPhi
            0.0 : 1.513834489150,
            0.1 : 1.541738780180,
            0.2 : 1.497829632510,
            0.3 : 1.534956782920,
            0.4 : 1.478217033060,
            0.5 : 1.504330859290,
            0.6 : 1.520626246850,
            0.7 : 1.507013090030,
            0.8 : 1.494243156250,
            0.9 : 1.450536096150,
            1.0 : 1.460812521660,
            1.1 : 1.471603622200,
            1.2 : 1.467700038200,
            1.3 : 1.422408690640,
            1.4 : 1.397184022730,
            1.5 : 1.375593447520,
            1.6 : 1.391901318370,
            1.7 : 1.368564350560,
            1.8 : 1.317884804290,
            1.9 : 1.314019950800,
            2.0 : 1.274641749910,
            2.1 : 1.242346606820,
            2.2 : 1.244727403840,
            2.3 : 1.146259351670,
            2.4 : 1.107804993520,
            2.5 : 1.042053646740,
            2.6 : 0.973608545141,
            2.7 : 0.872169942668,
            2.8 : 0.734505279177,
            2.9 : 1.163152837230,       
        }
        
        self.massZZ_4l = { # lower boundary of mass
             0.0   : 1.23613311013,
             25.0  : 1.17550314639,
             50.0  : 1.17044565911,
             75.0  : 1.03141209689,
             100.0 : 1.05285574912,
             125.0 : 1.11287217794,
             150.0 : 1.13361441158,
             175.0 : 1.10355603327,
             200.0 : 1.10053981637,
             225.0 : 1.10972676811,
             250.0 : 1.12069120525,
             275.0 : 1.11589101635,
             300.0 : 1.13906170314,
             325.0 : 1.14854594271,
             350.0 : 1.14616229031,
             375.0 : 1.14573157789,
             400.0 : 1.13829430515,
             425.0 : 1.15521193686,
             450.0 : 1.13679822698,
             475.0 : 1.13223956942,
        }
        
        self.massZZ_2l2l = { # lower boundary of mass
            0.0   : 1.25094466582,
            25.0  : 1.22459455362,
            50.0  : 1.19287368979,
            75.0  : 1.04597506451,
            100.0 : 1.08323413771,
            125.0 : 1.09994968030,
            150.0 : 1.16698455800,
            175.0 : 1.10399053155,
            200.0 : 1.10592664340,
            225.0 : 1.10690381480,
            250.0 : 1.11194928918,
            275.0 : 1.13522586553,
            300.0 : 1.11895090244,
            325.0 : 1.13898508615,
            350.0 : 1.15463977506,
            375.0 : 1.17341664594,
            400.0 : 1.20093349763,
            425.0 : 1.18915554919,
            450.0 : 1.18546007375,
            475.0 : 1.12864505708,
        }
        
        self.ptZZ_4l = { # lower boundary of pt
            0.0   : 0.64155491983,
            5.0   : 1.09985240531,
            10.0  : 1.29390628654,
            15.0  : 1.37859998571,
            20.0  : 1.42430263312,
            25.0  : 1.45038493266,
            30.0  : 1.47015377651,
            35.0  : 1.48828685748,
            40.0  : 1.50573440448,
            45.0  : 1.50211655928,
            50.0  : 1.50918720827,
            55.0  : 1.52463089491,
            60.0  : 1.52400838378,
            65.0  : 1.52418067701,
            70.0  : 1.55424382578,
            75.0  : 1.52544284222,
            80.0  : 1.57896384602,
            85.0  : 1.53034682567,
            90.0  : 1.56147329708,
            95.0  : 1.54468169268,
            100.0 : 1.57222952415,
        }
        
        self.ptZZ_2l2l = { # lower boundary of pt
            0.0   : 0.74360253330,
            5.0   : 1.14789453219,
            10.0  : 1.33815867892,
            15.0  : 1.41420044104,
            20.0  : 1.45511318916,
            25.0  : 1.47569225244,
            30.0  : 1.49053003693,
            35.0  : 1.50622827695,
            40.0  : 1.50328889799,
            45.0  : 1.52186945281,
            50.0  : 1.52043468754,
            55.0  : 1.53977869986,
            60.0  : 1.53491994434,
            65.0  : 1.51772882172,
            70.0  : 1.54494489131,
            75.0  : 1.57762411697,
            80.0  : 1.55078339014,
            85.0  : 1.57078191891,
            90.0  : 1.56162666568,
            95.0  : 1.54183774627,
            100.0 : 1.58485762205,
        }

    def weight(self, genParticles):

        # get 4 leptons
        leps = []
        for gen in genParticles:
            #if (abs(gen.pdgId()) in [11,13] and gen.fromHardProcess())
            if abs(gen.pdgId()) in [11,13,15] and (gen.mother_1()==23 or gen.mother_2()==23):
                leps += [gen]

        if len(leps)==4:
            flavs = [lep.pdgId() for lep in leps]
            if flavs.count(flavs[0])==len(flavs):
                theDict = self.ptZZ_4l
            else:
                theDict = self.ptZZ_2l2l
            zz = CompositeCandidate(*leps)
            zzPt = zz.pt()
            w = self.default
            for pt in sorted(theDict):
                if zzPt>=pt:
                    w = theDict[pt]
        else:
            print 'Wrong number of leptons'
            for lep in leps:
                print '    {0} {1} {2} {3}'.format(lep.pdgId(), lep.pt(), lep.eta(), lep.phi())
            w = self.default

        return w
